// //BLA BLA BLA....
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "sender_data.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_sender_data {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// SendData

SendData::SendData() {}

SendData::SendData(const std::string* data)
 : data_(data ? std::optional<std::string>(*data) : std::nullopt) {}

const std::string* SendData::data() const {
  return data_ ? &(*data_) : nullptr;
}

void SendData::set_data(const std::string_view* value_arg) {
  data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SendData::set_data(std::string_view value_arg) {
  data_ = value_arg;
}


EncodableList SendData::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(data_ ? EncodableValue(*data_) : EncodableValue());
  return list;
}

SendData SendData::FromEncodableList(const EncodableList& list) {
  SendData decoded;
  auto& encodable_data = list[0];
  if (!encodable_data.IsNull()) {
    decoded.set_data(std::get<std::string>(encodable_data));
  }
  return decoded;
}

// SenderStatus

SenderStatus::SenderStatus() {}

SenderStatus::SenderStatus(
  const bool* result_successful,
  const bool* has_error,
  const std::string* error)
 : result_successful_(result_successful ? std::optional<bool>(*result_successful) : std::nullopt),
    has_error_(has_error ? std::optional<bool>(*has_error) : std::nullopt),
    error_(error ? std::optional<std::string>(*error) : std::nullopt) {}

const bool* SenderStatus::result_successful() const {
  return result_successful_ ? &(*result_successful_) : nullptr;
}

void SenderStatus::set_result_successful(const bool* value_arg) {
  result_successful_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void SenderStatus::set_result_successful(bool value_arg) {
  result_successful_ = value_arg;
}


const bool* SenderStatus::has_error() const {
  return has_error_ ? &(*has_error_) : nullptr;
}

void SenderStatus::set_has_error(const bool* value_arg) {
  has_error_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void SenderStatus::set_has_error(bool value_arg) {
  has_error_ = value_arg;
}


const std::string* SenderStatus::error() const {
  return error_ ? &(*error_) : nullptr;
}

void SenderStatus::set_error(const std::string_view* value_arg) {
  error_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SenderStatus::set_error(std::string_view value_arg) {
  error_ = value_arg;
}


EncodableList SenderStatus::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(result_successful_ ? EncodableValue(*result_successful_) : EncodableValue());
  list.push_back(has_error_ ? EncodableValue(*has_error_) : EncodableValue());
  list.push_back(error_ ? EncodableValue(*error_) : EncodableValue());
  return list;
}

SenderStatus SenderStatus::FromEncodableList(const EncodableList& list) {
  SenderStatus decoded;
  auto& encodable_result_successful = list[0];
  if (!encodable_result_successful.IsNull()) {
    decoded.set_result_successful(std::get<bool>(encodable_result_successful));
  }
  auto& encodable_has_error = list[1];
  if (!encodable_has_error.IsNull()) {
    decoded.set_has_error(std::get<bool>(encodable_has_error));
  }
  auto& encodable_error = list[2];
  if (!encodable_error.IsNull()) {
    decoded.set_error(std::get<std::string>(encodable_error));
  }
  return decoded;
}

// ReceiveData

ReceiveData::ReceiveData() {}

ReceiveData::ReceiveData(const std::string* data)
 : data_(data ? std::optional<std::string>(*data) : std::nullopt) {}

const std::string* ReceiveData::data() const {
  return data_ ? &(*data_) : nullptr;
}

void ReceiveData::set_data(const std::string_view* value_arg) {
  data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ReceiveData::set_data(std::string_view value_arg) {
  data_ = value_arg;
}


EncodableList ReceiveData::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(data_ ? EncodableValue(*data_) : EncodableValue());
  return list;
}

ReceiveData ReceiveData::FromEncodableList(const EncodableList& list) {
  ReceiveData decoded;
  auto& encodable_data = list[0];
  if (!encodable_data.IsNull()) {
    decoded.set_data(std::get<std::string>(encodable_data));
  }
  return decoded;
}


DataSenderCodecSerializer::DataSenderCodecSerializer() {}

EncodableValue DataSenderCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(SendData::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(SenderStatus::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void DataSenderCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(SendData)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<SendData>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(SenderStatus)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<SenderStatus>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by DataSender.
const flutter::StandardMessageCodec& DataSender::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&DataSenderCodecSerializer::GetInstance());
}

// Sets up an instance of `DataSender` to handle messages through the `binary_messenger`.
void DataSender::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  DataSender* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.pigeon_sender_data.DataSender.send", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_data_arg = args.at(0);
          if (encodable_data_arg.IsNull()) {
            reply(WrapError("data_arg unexpectedly null."));
            return;
          }
          const auto& data_arg = std::any_cast<const SendData&>(std::get<CustomEncodableValue>(encodable_data_arg));
          ErrorOr<SenderStatus> output = api->Send(data_arg);
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue DataSender::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue DataSender::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}


DataReceiverCodecSerializer::DataReceiverCodecSerializer() {}

EncodableValue DataReceiverCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(ReceiveData::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void DataReceiverCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(ReceiveData)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<ReceiveData>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
DataReceiver::DataReceiver(flutter::BinaryMessenger* binary_messenger)
 : binary_messenger_(binary_messenger) {}

const flutter::StandardMessageCodec& DataReceiver::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&DataReceiverCodecSerializer::GetInstance());
}

void DataReceiver::Receive(
  const ReceiveData& data_arg,
  std::function<void(void)>&& on_success,
  std::function<void(const FlutterError&)>&& on_error) {
  auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger_, "dev.flutter.pigeon.pigeon_sender_data.DataReceiver.receive", &GetCodec());
  EncodableValue encoded_api_arguments = EncodableValue(EncodableList{
    CustomEncodableValue(data_arg),
  });
  channel->Send(encoded_api_arguments, [on_success = std::move(on_success), on_error = std::move(on_error)](const uint8_t* reply, size_t reply_size) {
    on_success();
  });
}

}  // namespace pigeon_sender_data
