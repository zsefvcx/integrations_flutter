// //BLA BLA BLA....
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_SENDER_DATA_G_H_
#define PIGEON_SENDER_DATA_G_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace pigeon_sender_data {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class DataSender;
  friend class DataReceiver;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class SendData {
 public:
  // Constructs an object setting all non-nullable fields.
  SendData();

  // Constructs an object setting all fields.
  explicit SendData(const std::string* data);

  const std::string* data() const;
  void set_data(const std::string_view* value_arg);
  void set_data(std::string_view value_arg);


 private:
  static SendData FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class DataSender;
  friend class DataSenderCodecSerializer;
  friend class DataReceiver;
  friend class DataReceiverCodecSerializer;
  std::optional<std::string> data_;

};


// Generated class from Pigeon that represents data sent in messages.
class SenderStatus {
 public:
  // Constructs an object setting all non-nullable fields.
  SenderStatus();

  // Constructs an object setting all fields.
  explicit SenderStatus(
    const bool* result_successful,
    const bool* has_error,
    const std::string* error);

  const bool* result_successful() const;
  void set_result_successful(const bool* value_arg);
  void set_result_successful(bool value_arg);

  const bool* has_error() const;
  void set_has_error(const bool* value_arg);
  void set_has_error(bool value_arg);

  const std::string* error() const;
  void set_error(const std::string_view* value_arg);
  void set_error(std::string_view value_arg);


 private:
  static SenderStatus FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class DataSender;
  friend class DataSenderCodecSerializer;
  friend class DataReceiver;
  friend class DataReceiverCodecSerializer;
  std::optional<bool> result_successful_;
  std::optional<bool> has_error_;
  std::optional<std::string> error_;

};


// Generated class from Pigeon that represents data sent in messages.
class ReceiveData {
 public:
  // Constructs an object setting all non-nullable fields.
  ReceiveData();

  // Constructs an object setting all fields.
  explicit ReceiveData(const std::string* data);

  const std::string* data() const;
  void set_data(const std::string_view* value_arg);
  void set_data(std::string_view value_arg);


 private:
  static ReceiveData FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class DataSender;
  friend class DataSenderCodecSerializer;
  friend class DataReceiver;
  friend class DataReceiverCodecSerializer;
  std::optional<std::string> data_;

};

class DataSenderCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  DataSenderCodecSerializer();
  inline static DataSenderCodecSerializer& GetInstance() {
    static DataSenderCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class DataSender {
 public:
  DataSender(const DataSender&) = delete;
  DataSender& operator=(const DataSender&) = delete;
  virtual ~DataSender() {}
  virtual ErrorOr<SenderStatus> Send(const SendData& data) = 0;

  // The codec used by DataSender.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `DataSender` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    DataSender* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  DataSender() = default;

};
class DataReceiverCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  DataReceiverCodecSerializer();
  inline static DataReceiverCodecSerializer& GetInstance() {
    static DataReceiverCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated class from Pigeon that represents Flutter messages that can be called from C++.
class DataReceiver {
 public:
  DataReceiver(flutter::BinaryMessenger* binary_messenger);
  static const flutter::StandardMessageCodec& GetCodec();
  void Receive(
    const ReceiveData& data,
    std::function<void(void)>&& on_success,
    std::function<void(const FlutterError&)>&& on_error);

 private:
  flutter::BinaryMessenger* binary_messenger_;
};

}  // namespace pigeon_sender_data
#endif  // PIGEON_SENDER_DATA_G_H_
