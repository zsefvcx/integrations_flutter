// //BLA BLA BLA....
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct SendData {
  var data: String? = nil

  static func fromList(_ list: [Any?]) -> SendData? {
    let data: String? = nilOrValue(list[0])

    return SendData(
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SenderStatus {
  var resultSuccessful: Bool? = nil
  var hasError: Bool? = nil
  var error: String? = nil

  static func fromList(_ list: [Any?]) -> SenderStatus? {
    let resultSuccessful: Bool? = nilOrValue(list[0])
    let hasError: Bool? = nilOrValue(list[1])
    let error: String? = nilOrValue(list[2])

    return SenderStatus(
      resultSuccessful: resultSuccessful,
      hasError: hasError,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      resultSuccessful,
      hasError,
      error,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReceiveData {
  var data: String? = nil

  static func fromList(_ list: [Any?]) -> ReceiveData? {
    let data: String? = nilOrValue(list[0])

    return ReceiveData(
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      data,
    ]
  }
}
private class DataSenderCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SendData.fromList(self.readValue() as! [Any?])
      case 129:
        return SenderStatus.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DataSenderCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SendData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? SenderStatus {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DataSenderCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DataSenderCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DataSenderCodecWriter(data: data)
  }
}

class DataSenderCodec: FlutterStandardMessageCodec {
  static let shared = DataSenderCodec(readerWriter: DataSenderCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DataSender {
  func send(data: SendData) throws -> SenderStatus
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DataSenderSetup {
  /// The codec used by DataSender.
  static var codec: FlutterStandardMessageCodec { DataSenderCodec.shared }
  /// Sets up an instance of `DataSender` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DataSender?) {
    let sendChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_sender_data.DataSender.send", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! SendData
        do {
          let result = try api.send(data: dataArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendChannel.setMessageHandler(nil)
    }
  }
}
private class DataReceiverCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ReceiveData.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DataReceiverCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ReceiveData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DataReceiverCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DataReceiverCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DataReceiverCodecWriter(data: data)
  }
}

class DataReceiverCodec: FlutterStandardMessageCodec {
  static let shared = DataReceiverCodec(readerWriter: DataReceiverCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class DataReceiver {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return DataReceiverCodec.shared
  }
  func receive(data dataArg: ReceiveData, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_sender_data.DataReceiver.receive", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { _ in
      completion()
    }
  }
}
