// //BLA BLA BLA....
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
package io.flutter.plugins;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class SenderData {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SendData {
    private @Nullable String data;

    public @Nullable String getData() {
      return data;
    }

    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {

      private @Nullable String data;

      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull SendData build() {
        SendData pigeonReturn = new SendData();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull SendData fromList(@NonNull ArrayList<Object> list) {
      SendData pigeonResult = new SendData();
      Object data = list.get(0);
      pigeonResult.setData((String) data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SenderStatus {
    private @Nullable Boolean resultSuccessful;

    public @Nullable Boolean getResultSuccessful() {
      return resultSuccessful;
    }

    public void setResultSuccessful(@Nullable Boolean setterArg) {
      this.resultSuccessful = setterArg;
    }

    private @Nullable Boolean hasError;

    public @Nullable Boolean getHasError() {
      return hasError;
    }

    public void setHasError(@Nullable Boolean setterArg) {
      this.hasError = setterArg;
    }

    private @Nullable String error;

    public @Nullable String getError() {
      return error;
    }

    public void setError(@Nullable String setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {

      private @Nullable Boolean resultSuccessful;

      public @NonNull Builder setResultSuccessful(@Nullable Boolean setterArg) {
        this.resultSuccessful = setterArg;
        return this;
      }

      private @Nullable Boolean hasError;

      public @NonNull Builder setHasError(@Nullable Boolean setterArg) {
        this.hasError = setterArg;
        return this;
      }

      private @Nullable String error;

      public @NonNull Builder setError(@Nullable String setterArg) {
        this.error = setterArg;
        return this;
      }

      public @NonNull SenderStatus build() {
        SenderStatus pigeonReturn = new SenderStatus();
        pigeonReturn.setResultSuccessful(resultSuccessful);
        pigeonReturn.setHasError(hasError);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(resultSuccessful);
      toListResult.add(hasError);
      toListResult.add(error);
      return toListResult;
    }

    static @NonNull SenderStatus fromList(@NonNull ArrayList<Object> list) {
      SenderStatus pigeonResult = new SenderStatus();
      Object resultSuccessful = list.get(0);
      pigeonResult.setResultSuccessful((Boolean) resultSuccessful);
      Object hasError = list.get(1);
      pigeonResult.setHasError((Boolean) hasError);
      Object error = list.get(2);
      pigeonResult.setError((String) error);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReceiveData {
    private @Nullable String data;

    public @Nullable String getData() {
      return data;
    }

    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {

      private @Nullable String data;

      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull ReceiveData build() {
        ReceiveData pigeonReturn = new ReceiveData();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull ReceiveData fromList(@NonNull ArrayList<Object> list) {
      ReceiveData pigeonResult = new ReceiveData();
      Object data = list.get(0);
      pigeonResult.setData((String) data);
      return pigeonResult;
    }
  }

  private static class DataSenderCodec extends StandardMessageCodec {
    public static final DataSenderCodec INSTANCE = new DataSenderCodec();

    private DataSenderCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return SendData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return SenderStatus.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof SendData) {
        stream.write(128);
        writeValue(stream, ((SendData) value).toList());
      } else if (value instanceof SenderStatus) {
        stream.write(129);
        writeValue(stream, ((SenderStatus) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface DataSender {

    @NonNull 
    SenderStatus send(@NonNull SendData data);

    /** The codec used by DataSender. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DataSenderCodec.INSTANCE;
    }
    /**Sets up an instance of `DataSender` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable DataSender api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_sender_data.DataSender.send", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SendData dataArg = (SendData) args.get(0);
                try {
                  SenderStatus output = api.send(dataArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class DataReceiverCodec extends StandardMessageCodec {
    public static final DataReceiverCodec INSTANCE = new DataReceiverCodec();

    private DataReceiverCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ReceiveData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ReceiveData) {
        stream.write(128);
        writeValue(stream, ((ReceiveData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class DataReceiver {
    private final @NonNull BinaryMessenger binaryMessenger;

    public DataReceiver(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by DataReceiver. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DataReceiverCodec.INSTANCE;
    }
    public void receive(@NonNull ReceiveData dataArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.pigeon_sender_data.DataReceiver.receive", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> callback.reply(null));
    }
  }
}
