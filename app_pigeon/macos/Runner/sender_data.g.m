// //BLA BLA BLA....
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "sender_data.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface PGNSendData ()
+ (PGNSendData *)fromList:(NSArray *)list;
+ (nullable PGNSendData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PGNSenderStatus ()
+ (PGNSenderStatus *)fromList:(NSArray *)list;
+ (nullable PGNSenderStatus *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface PGNReceiveData ()
+ (PGNReceiveData *)fromList:(NSArray *)list;
+ (nullable PGNReceiveData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation PGNSendData
+ (instancetype)makeWithData:(nullable NSString *)data {
  PGNSendData* pigeonResult = [[PGNSendData alloc] init];
  pigeonResult.data = data;
  return pigeonResult;
}
+ (PGNSendData *)fromList:(NSArray *)list {
  PGNSendData *pigeonResult = [[PGNSendData alloc] init];
  pigeonResult.data = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable PGNSendData *)nullableFromList:(NSArray *)list {
  return (list) ? [PGNSendData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.data ?: [NSNull null]),
  ];
}
@end

@implementation PGNSenderStatus
+ (instancetype)makeWithResultSuccessful:(nullable NSNumber *)resultSuccessful
    hasError:(nullable NSNumber *)hasError
    error:(nullable NSString *)error {
  PGNSenderStatus* pigeonResult = [[PGNSenderStatus alloc] init];
  pigeonResult.resultSuccessful = resultSuccessful;
  pigeonResult.hasError = hasError;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (PGNSenderStatus *)fromList:(NSArray *)list {
  PGNSenderStatus *pigeonResult = [[PGNSenderStatus alloc] init];
  pigeonResult.resultSuccessful = GetNullableObjectAtIndex(list, 0);
  pigeonResult.hasError = GetNullableObjectAtIndex(list, 1);
  pigeonResult.error = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable PGNSenderStatus *)nullableFromList:(NSArray *)list {
  return (list) ? [PGNSenderStatus fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.resultSuccessful ?: [NSNull null]),
    (self.hasError ?: [NSNull null]),
    (self.error ?: [NSNull null]),
  ];
}
@end

@implementation PGNReceiveData
+ (instancetype)makeWithData:(nullable NSString *)data {
  PGNReceiveData* pigeonResult = [[PGNReceiveData alloc] init];
  pigeonResult.data = data;
  return pigeonResult;
}
+ (PGNReceiveData *)fromList:(NSArray *)list {
  PGNReceiveData *pigeonResult = [[PGNReceiveData alloc] init];
  pigeonResult.data = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable PGNReceiveData *)nullableFromList:(NSArray *)list {
  return (list) ? [PGNReceiveData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.data ?: [NSNull null]),
  ];
}
@end

@interface PGNDataSenderCodecReader : FlutterStandardReader
@end
@implementation PGNDataSenderCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [PGNSendData fromList:[self readValue]];
    case 129: 
      return [PGNSenderStatus fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNDataSenderCodecWriter : FlutterStandardWriter
@end
@implementation PGNDataSenderCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNSendData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[PGNSenderStatus class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNDataSenderCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNDataSenderCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNDataSenderCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNDataSenderCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNDataSenderGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNDataSenderCodecReaderWriter *readerWriter = [[PGNDataSenderCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void PGNDataSenderSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNDataSender> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.pigeon_sender_data.DataSender.send"
        binaryMessenger:binaryMessenger
        codec:PGNDataSenderGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendData:error:)], @"PGNDataSender api (%@) doesn't respond to @selector(sendData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PGNSendData *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        PGNSenderStatus *output = [api sendData:arg_data error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface PGNDataReceiverCodecReader : FlutterStandardReader
@end
@implementation PGNDataReceiverCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [PGNReceiveData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNDataReceiverCodecWriter : FlutterStandardWriter
@end
@implementation PGNDataReceiverCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNReceiveData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNDataReceiverCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNDataReceiverCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNDataReceiverCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNDataReceiverCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNDataReceiverGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNDataReceiverCodecReaderWriter *readerWriter = [[PGNDataReceiverCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface PGNDataReceiver ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation PGNDataReceiver

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)receiveData:(PGNReceiveData *)arg_data completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.pigeon_sender_data.DataReceiver.receive"
      binaryMessenger:self.binaryMessenger
      codec:PGNDataReceiverGetCodec()];
  [channel sendMessage:@[arg_data ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

